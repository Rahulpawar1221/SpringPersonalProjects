{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/auth';\n  }\n  register(user) {\n    return this.http.post(`${this.baseUrl}/register`, user, {\n      responseType: 'text'\n    });\n  }\n  login(user) {\n    return this.http.post(`${this.baseUrl}/login`, user);\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  logout() {\n    localStorage.clear();\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    localStorage.removeItem('username');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","http","baseUrl","register","user","post","responseType","login","isLoggedIn","localStorage","getItem","getToken","getRole","logout","clear","removeItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My Personal SpringBoot Projects\\tenant_management_system\\tenant_management_system Frontend\\tms_frontend\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["// src/app/auth/auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8080/auth';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  register(user: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/register`, user, { responseType: 'text' });\r\n  }\r\n\r\n  login(user: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/login`, user);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  getRole(): string | null {\r\n    return localStorage.getItem('role');\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.clear();\r\n    localStorage.removeItem('token');\r\n  localStorage.removeItem('role');\r\n  localStorage.removeItem('username');\r\n  }\r\n}\r\n"],"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,4BAA4B;EAEP;EAEvCC,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,WAAW,EAAEE,IAAI,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EACnF;EAEAC,KAAKA,CAACH,IAAS;IACb,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEE,IAAI,CAAC;EACtD;EAEAI,UAAUA,CAAA;IACR,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAE,OAAOA,CAAA;IACL,OAAOH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACrC;EAEAG,MAAMA,CAAA;IACJJ,YAAY,CAACK,KAAK,EAAE;IACpBL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAClCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/BN,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACnC;;;uBA9BWhB,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXpB,WAAW;MAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}